diff --git a/Include/opcode.h b/Include/opcode.h
index 99c3b0e..f0b092e 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -128,6 +128,7 @@ extern "C" {
 #define BUILD_TUPLE_UNPACK_WITH_CALL 158
 #define LOAD_METHOD             160
 #define CALL_METHOD             161
+#define LOAD_BEST		162
 
 /* EXCEPT_HANDLER is a special, implicit block type which is created when
    entering an except handler. It is not an opcode but we define it here
diff --git a/Lib/opcode.py b/Lib/opcode.py
index dffb38c..1513081 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -215,4 +215,8 @@ def_op('BUILD_TUPLE_UNPACK_WITH_CALL', 158)
 name_op('LOAD_METHOD', 160)
 def_op('CALL_METHOD', 161)
 
+def_op('LOAD_BEST', 162)
+hasconst.append(162)
+haslocal.append(162)
+
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index 59fc070..77e2dbf 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1218,6 +1218,25 @@ _PyEval_EvalFrameDefault(PyFrameObject *f, int throwflag)
             PUSH(value);
             FAST_DISPATCH();
         }
+	
+	PREDICTED(LOAD_BEST)
+	TARGET(LOAD_BEST) {
+	    PyObject *value = GETLOCAL(oparg);
+            if (value == NULL) {
+                format_exc_check_arg(PyExc_UnboundLocalError,
+                                     UNBOUNDLOCAL_ERROR_MSG,
+                                     PyTuple_GetItem(co->co_varnames, oparg));
+                goto error;
+            }
+            Py_INCREF(value);
+            PUSH(value);
+	    
+	    PyObject *value_const = GETITEM(consts, oparg);
+            Py_INCREF(value_const);
+            PUSH(value_const);
+		
+            FAST_DISPATCH();
+	}	
 
         PREDICTED(STORE_FAST);
         TARGET(STORE_FAST) {
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 567f872..6b4ba0c 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -161,7 +161,7 @@ static void *opcode_targets[256] = {
     &&_unknown_opcode,
     &&TARGET_LOAD_METHOD,
     &&TARGET_CALL_METHOD,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_BEST,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 1bee710..8d6b5af 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -520,6 +520,18 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 CONST_STACK_POP(1);
                 break;
 
+	    case LOAD_BEST:
+                CONST_STACK_PUSH_OP(i);
+                if (nextop != POP_JUMP_IF_FALSE  ||
+                    !ISBASICBLOCK(blocks, op_start, i + 1)  ||
+                    !PyObject_IsTrue(PyList_GET_ITEM(consts, get_arg(codestr, i))))
+                    break;
+                fill_nops(codestr, op_start, nexti + 1);
+                CONST_STACK_POP(1);
+                break;
+
+	
+
                 /* Try to fold tuples of constants (includes a case for lists
                    and sets which are only used for "in" and "not in" tests).
                    Skip over BUILD_SEQN 1 UNPACK_SEQN 1.
